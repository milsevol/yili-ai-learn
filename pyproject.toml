[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "yili-ai-learn"
version = "0.1.0"
description = "一个专注于人工智能学习的综合性项目"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "崔学勇", email = "your-email@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.8"
dependencies = [
    "pymilvus>=2.4.2",
    "milvus-lite>=2.5.0",
    "langchain-milvus>=0.2.0",
    "langchain-core>=0.1.0",
    "langchain-community>=0.0.20",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "tqdm>=4.64.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "requests>=2.28.0",
    "httpx>=0.24.0",
    "python-dotenv>=0.19.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.910",
    "isort>=5.10.0",
]
openai = [
    "openai>=1.0.0",
]
transformers = [
    "sentence-transformers>=2.2.0",
    "transformers>=4.20.0",
    "torch>=1.12.0",
]
all = [
    "yili-ai-learn[dev,openai,transformers]",
]

[project.scripts]
yili-milvus-demo = "向量数据库.milvus.demo.02demo.run_all_demos:main"

[project.urls]
Homepage = "https://github.com/your-username/yili-ai-learn"
Repository = "https://github.com/your-username/yili-ai-learn"
Issues = "https://github.com/your-username/yili-ai-learn/issues"

# Black 代码格式化配置
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort 导入排序配置
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["向量数据库"]

# MyPy 类型检查配置
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest 配置
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]

# Coverage 配置
[tool.coverage.run]
source = ["向量数据库"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]